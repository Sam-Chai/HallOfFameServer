generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "mongodb"
  url      = env("HOF_DATABASE_URL")
}

/// An user/account, needed to view and upload screenshots.
model Creator {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime          @default(now())
  /// Creator's name, public.
  /// Can contain only unicode letters, numbers, spaces, hyphens, apostrophes, and be between 1 and
  /// 20 characters long.
  /// It can otherwise be null and then UIs should display "Anonymous".
  /// Normally this should be `@unique` but MongoDB doesn't support sparse unique indexes so we have
  /// to enforce this in the application instead.
  creatorName         String?
  /// Slug version of `Creator.creatorName`, used for efficient case-insensitive searches, to
  /// enforce uniqueness in all cases.
  /// Also could be used for vanity URLs in the future.
  creatorNameSlug     String?
  /// Whether the user is allowed to reset their `creatorId`: the next time the user logs in,
  /// whatever they used to log in will be their new `creatorId`, and `allowCreatorIdReset` will be
  /// reset to false.
  allowCreatorIdReset Boolean           @default(false)
  /// This is our "Creator ID" and also the Paradox account ID.
  /// This is how users are identified and authenticated, and plays the role of a password or API
  /// token, as this account ID is only known to an authenticated Paradox user.
  creatorId           String            @unique
  /// The provider of the `Creator.creatorId`, either local (random ID generated by the mod and
  /// managed by the user) or Paradox account GUID.
  creatorIdProvider   CreatorIdProvider
  /// Whether the Creator is a supporter of the project.
  /// Currently this only means they sent screenshots before public release.
  isSupporter         Boolean           @default(false)
  /// All unique hardware IDs used by this Creator, used to ban an Creator and mitigate hostile
  /// multi-accounting, along with `Creator.ips`.
  hwids               String[]
  /// Same purpose as `Creator.hwids`, but for the IP addresses.
  /// Contrarily to hardware IDs, IPs are harder to spoof so this adds as an additional layer of
  /// security.
  ips                 String[]
  /// Map of social accounts of the Creator.
  social              CreatorSocial
  /// JSON object containing the latest known mod settings this user used.
  /// Used to better understand the mod's usage.
  modSettings         Json?
  /// One to many relationship with posted Screenshots.
  screenshots         Screenshot[]      @relation("screenshots")
  /// One to many relationship with reported Screenshots.
  reportedScreenshots Screenshot[]      @relation("reports")
  /// One to many relationship with Bans targeting the Creator.
  bans                Ban[]
  /// One to many relationship with Favorites.
  favorites           Favorite[]
  /// One to many relationship with Views, the screenshots the Creator has seen.
  viewedScreenshots   View[]

  @@index([creatorName])
  @@index([creatorNameSlug])
  @@index([creatorIdProvider])
  @@index([isSupporter])
  @@map("creators")
}

enum CreatorIdProvider {
  local
  paradox
}

/// A map of links to social accounts of a Creator.
type CreatorSocial {
  discordServer DiscordServerSocialLink?
  paradoxMods   ParadoxModsSocialLink?
  reddit        RedditSocialLink?
  twitch        TwitchSocialLink?
  youtube       YoutubeSocialLink?
}

type DiscordServerSocialLink {
  serverName String
  code       String
  clicks     Int    @default(0)
}

type ParadoxModsSocialLink {
  username String
  clicks   Int    @default(0)
}

type RedditSocialLink {
  username String
  clicks   Int    @default(0)
}

type TwitchSocialLink {
  channel String
  clicks  Int    @default(0)
}

type YoutubeSocialLink {
  channel String
  clicks  Int    @default(0)
}

/// A screenshot uploaded by a Creator.
model Screenshot {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime   @default(now())
  /// Whether that screenshot was manually approved by an admin.
  /// If true, users won't be able to signal that screenshot again.
  isApproved           Boolean    @default(false)
  /// Whether an user has reported the Screenshot as inappropriate.
  /// If true, the Screenshot is hidden from the public until an admin reviews it and decides to
  /// reset the flag or take action.
  isReported           Boolean    @default(false)
  /// Creator who reported the Screenshot.
  /// Useful to track users who abuse the report feature and eventually reset a bunch of reports if
  /// they aren't justified.
  reportedById         String?    @db.ObjectId
  reportedBy           Creator?   @relation("reports", fields: [reportedById], references: [id], onDelete: SetNull)
  /// Number of favorites the Screenshot has received.
  favoritesCount       Int        @default(0)
  /// Average number of favorites the Screenshot has received per day.
  favoritesPerDay      Float      @default(0)
  /// Percentage of users who favorited the Screenshot when they saw it.
  /// Math.round(favoritesCount / viewsCount * 100)
  favoritingPercentage Float      @default(0)
  /// Number of views the Screenshot has received.
  viewsCount           Int        @default(0)
  /// Average number of views the Screenshot has received per day.
  viewsPerDay          Float      @default(0)
  /// Hardware ID of the user who uploaded the Screenshot.
  /// Used in case a user is multi-accounting (which is allowed), to keep track of all the
  /// screenshots uploaded by a same person to apply quota even across multiple accounts.
  /// Null if the screenshot was created programmatically by an admin (like CLI-imported
  /// screenshots).
  hwid                 String?
  /// Same purpose as `Screenshot.hwid`, but for the IP address.
  ip                   String?
  creatorId            String     @db.ObjectId
  creator              Creator    @relation("screenshots", fields: [creatorId], references: [id], onDelete: Cascade)
  /// Name of the city.
  /// Can contain only unicode letters, numbers, spaces, hyphens, apostrophes, commas, and be
  /// between 1 and 20 characters long.
  cityName             String
  cityMilestone        Int
  cityPopulation       Int
  imageUrlThumbnail    String
  imageUrlFHD          String
  imageUrl4K           String
  /// Paradox Mods IDs of the active mods when the screenshot was taken.
  /// A Paradox mod ID is an auto-incremented integer.
  paradoxModIds        Int[]
  /// Schema-less JSON object of metadata sent by the client.
  /// Used for analytical/debugging purposes; not used by business logic.
  metadata             Json
  /// One to many relationship with Favorites.
  favorites            Favorite[]
  /// One to many relationship with Views.
  views                View[]

  @@index([createdAt])
  @@index([isReported]) // for "random" aggregation & simple filtering
  @@index([viewsCount])
  @@index([hwid])
  @@index([ip])
  @@index([creatorId]) // for "supporter" aggregation & simple filtering
  @@index([isReported, createdAt]) // for "recent" aggregation when <limit results
  @@index([isReported, favoritingPercentage]) // for "trending" aggregation
  @@index([isReported, viewsCount, createdAt]) // for "archeologist" aggregation and recent aggregation when >limit results
  @@map("screenshots")
}

/// Ban for a Creator and/or an Hardware ID and/or an IP address.
model Ban {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  bannedAt DateTime @default(now())
  reason   String

  /// Either a Creator, an Hardware ID (hwid) or an IP address can be banned.
  /// If creatorId is set, hwid and ip is set too and there is a Ban record for each of those
  /// hwids/ips used by the Creator.
  creatorId String?  @db.ObjectId
  creator   Creator? @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  /// If hwid is set, `creatorId` is null unless the creator was banned and all their associated
  /// hardware IDs were banned too.
  hwid      String?
  /// If the IP address is set, `creatorId` is null unless the creator was banned and all their
  /// associated IP addresses were banned too.
  ip        String?

  @@index([creatorId])
  @@index([hwid])
  @@index([ip])
  @@map("bans")
}

model Favorite {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  favoritedAt  DateTime   @default(now())
  /// Screenshot that was favorited.
  screenshotId String     @db.ObjectId
  screenshot   Screenshot @relation(fields: [screenshotId], references: [id], onDelete: Cascade)
  /// Creator who favorited the Screenshot.
  creatorId    String     @db.ObjectId
  creator      Creator    @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  /// As well as `ip`, prevents multi-accounting for favorites
  hwid         String
  /// As well as `hwid`, prevents multi-accounting for favorites
  ip           String

  /// These unique indexes will help us find a Favorite on a specific Screenshot set by a specific
  /// user, and prevent multi-accounting for favorites.
  @@unique([screenshotId, creatorId])
  @@unique([screenshotId, hwid])
  @@index([screenshotId, ip])
  /// Index to be used to find all Favorites for a single Screenshot.
  @@index([screenshotId])
  /// Index to be used to find all Favorites for a single Creator.
  @@index([creatorId])
  @@map("favorites")
}

/// Record of a view of a Screenshot, so that we can track views and avoid showing the same
/// screenshot to the same user multiple times.
model View {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  viewedAt     DateTime   @default(now())
  screenshotId String     @db.ObjectId
  screenshot   Screenshot @relation(fields: [screenshotId], references: [id], onDelete: Cascade)
  creatorId    String     @db.ObjectId
  creator      Creator    @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([screenshotId])
  @@index([creatorId])
  // Composite index for querying with date bounds to propose again screenshots the user hasn't seen
  // in a while.
  @@index([creatorId, viewedAt])
  @@map("views")
}
