generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("HOF_DATABASE_URL")
}

/// An user/account, needed to view and upload screenshots.
model Creator {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime     @default(now())
  /// Creator's name, public.
  /// Can contain only unicode letters, numbers, spaces, hyphens, apostrophes,
  /// and be between 2 and 20 characters long.
  creatorName     String       @unique
  /// Blake2b256 hash of the Creator ID (not the database Creator.id) used for
  /// authentication. Stakes are low so this is not salted or anything, but the
  /// Creator ID is our only secret so we'd rather not store it in plain text.
  hashedCreatorId String       @unique
  /// Whether the Creator is a supporter of the project.
  /// Currently this only means they sent screenshots before public release.
  isSupporter     Boolean      @default(false)
  /// All unique hardware IDs used by this Creator, used to ban an Creator and
  /// mitigate hostile multi-accounting.
  hwids           String[]
  /// One to many relationship with Screenshot.
  screenshots     Screenshot[]

  @@index([isSupporter])
  @@map("creators")
}

/// A screenshot uploaded by a Creator.
model Screenshot {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime @default(now())
  /// Whether an user has reported the Screenshot as inappropriate.
  /// If true, the Screenshot is hidden from the public until an admin reviews
  /// it and decides to reset the flag or take action.
  isReported        Boolean  @default(false)
  /// IP address of the user who reported the Screenshot.
  /// Useful to track users who abuse the report feature and eventually reset a
  /// bunch of reports if they aren't justified.
  reportedBy        String?
  /// Number of views the Screenshot has received.
  views             Int      @default(0)
  /// Hardware ID of the user who uploaded the Screenshot.
  /// Used in case a user is multi-accounting (which is allowed), to keep track
  /// of all the screenshots uploaded by a same person to apply quota even
  /// across multiple accounts.
  /// Null if the screenshot was created programmatically by an admin (ex.
  /// screenshots import via CLI).
  hwid              String?
  creatorId         String   @db.ObjectId
  creator           Creator  @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  cityName          String
  cityMilestone     Int
  cityPopulation    Int
  imageUrlThumbnail String
  imageUrlFHD       String
  imageUrl4K        String

  @@index([createdAt])
  @@index([isReported])
  @@index([createdAt, isReported]) // for "recent" aggregation
  @@index([views])
  @@index([views, isReported]) // for "low views" aggregation
  @@index([creatorId])
  @@index([creatorId, cityName])
  @@index([hwid])
  @@map("screenshots")
}

/// Ban for a Creator and/or an Hardware ID.
model Ban {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  bannedAt DateTime @default(now())
  reason   String

  /// Either a Creator or an Hardware ID (hwid) can be banned.
  /// If creatorId is set, hwid is set too and there is a Ban record for each
  /// hwid used by the Creator.
  creatorId String? @db.ObjectId
  /// If hwid is set, creatorId is null unless the creator was banned and
  /// all their associated hwids were banned too.
  hwid      String?

  @@index([creatorId])
  @@index([hwid])
  @@map("bans")
}

/// Record of a view of a Screenshot, so that we can track views and avoid
/// showing the same screenshot to the same user multiple times.
model View {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  viewedAt     DateTime @default(now())
  screenshotId String   @db.ObjectId
  creatorId    String   @db.ObjectId

  @@index([screenshotId])
  @@index([creatorId])
  // Composite index for querying with date bounds to propose again screenshots
  // the user hasn't seen in a while.
  @@index([creatorId, viewedAt])
  @@map("views")
}
